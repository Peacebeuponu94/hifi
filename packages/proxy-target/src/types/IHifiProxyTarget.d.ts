/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IHifiProxyTargetInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(address,uint256,uint256)": FunctionFragment;
    "borrowHToken(address,address,uint256)": FunctionFragment;
    "borrowHTokenAndAddLiquidity(address,address,uint256,uint256)": FunctionFragment;
    "borrowHTokenAndBuyUnderlying(address,address,uint256,uint256)": FunctionFragment;
    "borrowHTokenAndSellHToken(address,address,uint256,uint256)": FunctionFragment;
    "buyHToken(address,uint256,uint256)": FunctionFragment;
    "buyHTokenAndAddLiquidity(address,uint256,uint256)": FunctionFragment;
    "buyHTokenAndRepayBorrow(address,address,uint256,uint256)": FunctionFragment;
    "buyUnderlying(address,uint256,uint256)": FunctionFragment;
    "buyUnderlyingAndAddLiquidity(address,uint256,uint256)": FunctionFragment;
    "depositCollateral(address,address,uint256)": FunctionFragment;
    "depositCollateralAndBorrowHToken(address,address,address,uint256,uint256)": FunctionFragment;
    "depositCollateralAndBorrowHTokenAndAddLiquidity(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "depositCollateralAndBorrowHTokenAndSellHToken(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "depositUnderlyingAsCollateralAndBorrowHTokenAndAddLiquidity(address,address,uint256,uint256)": FunctionFragment;
    "redeemHToken(address,uint256)": FunctionFragment;
    "removeLiquidity(address,uint256)": FunctionFragment;
    "removeLiquidityAndRedeemHToken(address,uint256)": FunctionFragment;
    "removeLiquidityAndRepayBorrowAndWithdrawCollateral(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidityAndSellHToken(address,uint256,uint256)": FunctionFragment;
    "repayBorrow(address,address,uint256)": FunctionFragment;
    "sellHToken(address,uint256,uint256)": FunctionFragment;
    "sellUnderlying(address,uint256,uint256)": FunctionFragment;
    "sellUnderlyingAndRepayBorrow(address,address,uint256,uint256)": FunctionFragment;
    "supplyUnderlying(address,uint256)": FunctionFragment;
    "supplyUnderlyingAndRepayBorrow(address,address,uint256)": FunctionFragment;
    "withdrawCollateral(address,address,uint256)": FunctionFragment;
    "wrapEthAndDepositAndBorrowHTokenAndSellHToken(address,address,address,uint256,uint256)": FunctionFragment;
    "wrapEthAndDepositCollateral(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowHToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowHTokenAndAddLiquidity",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowHTokenAndBuyUnderlying",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowHTokenAndSellHToken",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyHToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyHTokenAndAddLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyHTokenAndRepayBorrow",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyUnderlying",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyUnderlyingAndAddLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateralAndBorrowHToken",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateralAndBorrowHTokenAndAddLiquidity",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateralAndBorrowHTokenAndSellHToken",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUnderlyingAsCollateralAndBorrowHTokenAndAddLiquidity",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemHToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAndRedeemHToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAndRepayBorrowAndWithdrawCollateral",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAndSellHToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellHToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellUnderlying",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellUnderlyingAndRepayBorrow",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyUnderlying",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyUnderlyingAndRepayBorrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapEthAndDepositAndBorrowHTokenAndSellHToken",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapEthAndDepositCollateral",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowHToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowHTokenAndAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowHTokenAndBuyUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowHTokenAndSellHToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyHToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyHTokenAndAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyHTokenAndRepayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyUnderlyingAndAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateralAndBorrowHToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateralAndBorrowHTokenAndAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateralAndBorrowHTokenAndSellHToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUnderlyingAsCollateralAndBorrowHTokenAndAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemHToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAndRedeemHToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAndRepayBorrowAndWithdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAndSellHToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellHToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellUnderlyingAndRepayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyUnderlyingAndRepayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapEthAndDepositAndBorrowHTokenAndSellHToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapEthAndDepositCollateral",
    data: BytesLike
  ): Result;

  events: {
    "BorrowHTokenAndBuyUnderlying(address,uint256,uint256)": EventFragment;
    "BorrowHTokenAndSellHToken(address,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BorrowHTokenAndBuyUnderlying"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowHTokenAndSellHToken"): EventFragment;
}

export type BorrowHTokenAndBuyUnderlyingEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    borrower: string;
    borrowAmount: BigNumber;
    underlyingAmount: BigNumber;
  }
>;

export type BorrowHTokenAndSellHTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    borrower: string;
    borrowAmount: BigNumber;
    underlyingAmount: BigNumber;
  }
>;

export class IHifiProxyTarget extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IHifiProxyTargetInterface;

  functions: {
    addLiquidity(
      hifiPool: string,
      underlyingOffered: BigNumberish,
      maxHTokenRequired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowHToken(
      balanceSheet: string,
      hToken: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowHTokenAndAddLiquidity(
      balanceSheet: string,
      hifiPool: string,
      maxBorrowAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowHTokenAndBuyUnderlying(
      balanceSheet: string,
      hifiPool: string,
      maxBorrowAmount: BigNumberish,
      underlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowHTokenAndSellHToken(
      balanceSheet: string,
      hifiPool: string,
      borrowAmount: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyHToken(
      hifiPool: string,
      hTokenOut: BigNumberish,
      maxUnderlyingIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyHTokenAndAddLiquidity(
      hifiPool: string,
      hTokenOut: BigNumberish,
      maxUnderlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyHTokenAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyUnderlying(
      hifiPool: string,
      underlyingOut: BigNumberish,
      maxHTokenIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyUnderlyingAndAddLiquidity(
      hifiPool: string,
      maxHTokenAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCollateral(
      balanceSheet: string,
      collateral: string,
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCollateralAndBorrowHToken(
      balanceSheet: string,
      collateral: string,
      hToken: string,
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCollateralAndBorrowHTokenAndAddLiquidity(
      balanceSheet: string,
      collateral: string,
      hifiPool: string,
      depositAmount: BigNumberish,
      maxBorrowAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCollateralAndBorrowHTokenAndSellHToken(
      balanceSheet: string,
      collateral: string,
      hifiPool: string,
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositUnderlyingAsCollateralAndBorrowHTokenAndAddLiquidity(
      balanceSheet: string,
      hifiPool: string,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemHToken(
      hToken: string,
      hTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityAndRedeemHToken(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityAndRepayBorrowAndWithdrawCollateral(
      hifiPool: string,
      balanceSheet: string,
      collateral: string,
      poolTokensBurned: BigNumberish,
      repayAmount: BigNumberish,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityAndSellHToken(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayBorrow(
      balanceSheet: string,
      hToken: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellHToken(
      hifiPool: string,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellUnderlying(
      hifiPool: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellUnderlyingAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplyUnderlying(
      hToken: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplyUnderlyingAndRepayBorrow(
      hToken: string,
      balanceSheet: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      balanceSheet: string,
      collateral: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapEthAndDepositAndBorrowHTokenAndSellHToken(
      weth: string,
      balanceSheet: string,
      hifiPool: string,
      borrowAmount: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapEthAndDepositCollateral(
      weth: string,
      balanceSheet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    hifiPool: string,
    underlyingOffered: BigNumberish,
    maxHTokenRequired: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowHToken(
    balanceSheet: string,
    hToken: string,
    borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowHTokenAndAddLiquidity(
    balanceSheet: string,
    hifiPool: string,
    maxBorrowAmount: BigNumberish,
    underlyingOffered: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowHTokenAndBuyUnderlying(
    balanceSheet: string,
    hifiPool: string,
    maxBorrowAmount: BigNumberish,
    underlyingOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowHTokenAndSellHToken(
    balanceSheet: string,
    hifiPool: string,
    borrowAmount: BigNumberish,
    minUnderlyingOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyHToken(
    hifiPool: string,
    hTokenOut: BigNumberish,
    maxUnderlyingIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyHTokenAndAddLiquidity(
    hifiPool: string,
    hTokenOut: BigNumberish,
    maxUnderlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyHTokenAndRepayBorrow(
    hifiPool: string,
    balanceSheet: string,
    maxUnderlyingIn: BigNumberish,
    hTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyUnderlying(
    hifiPool: string,
    underlyingOut: BigNumberish,
    maxHTokenIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyUnderlyingAndAddLiquidity(
    hifiPool: string,
    maxHTokenAmount: BigNumberish,
    underlyingOffered: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCollateral(
    balanceSheet: string,
    collateral: string,
    depositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCollateralAndBorrowHToken(
    balanceSheet: string,
    collateral: string,
    hToken: string,
    depositAmount: BigNumberish,
    borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCollateralAndBorrowHTokenAndAddLiquidity(
    balanceSheet: string,
    collateral: string,
    hifiPool: string,
    depositAmount: BigNumberish,
    maxBorrowAmount: BigNumberish,
    underlyingOffered: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCollateralAndBorrowHTokenAndSellHToken(
    balanceSheet: string,
    collateral: string,
    hifiPool: string,
    depositAmount: BigNumberish,
    borrowAmount: BigNumberish,
    minUnderlyingOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositUnderlyingAsCollateralAndBorrowHTokenAndAddLiquidity(
    balanceSheet: string,
    hifiPool: string,
    depositAmount: BigNumberish,
    underlyingOffered: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemHToken(
    hToken: string,
    hTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    hifiPool: string,
    poolTokensBurned: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityAndRedeemHToken(
    hifiPool: string,
    poolTokensBurned: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityAndRepayBorrowAndWithdrawCollateral(
    hifiPool: string,
    balanceSheet: string,
    collateral: string,
    poolTokensBurned: BigNumberish,
    repayAmount: BigNumberish,
    withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityAndSellHToken(
    hifiPool: string,
    poolTokensBurned: BigNumberish,
    minUnderlyingOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayBorrow(
    balanceSheet: string,
    hToken: string,
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellHToken(
    hifiPool: string,
    hTokenIn: BigNumberish,
    minUnderlyingOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellUnderlying(
    hifiPool: string,
    underlyingIn: BigNumberish,
    minHTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellUnderlyingAndRepayBorrow(
    hifiPool: string,
    balanceSheet: string,
    underlyingIn: BigNumberish,
    minHTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplyUnderlying(
    hToken: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplyUnderlyingAndRepayBorrow(
    hToken: string,
    balanceSheet: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    balanceSheet: string,
    collateral: string,
    withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapEthAndDepositAndBorrowHTokenAndSellHToken(
    weth: string,
    balanceSheet: string,
    hifiPool: string,
    borrowAmount: BigNumberish,
    minUnderlyingOut: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapEthAndDepositCollateral(
    weth: string,
    balanceSheet: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      hifiPool: string,
      underlyingOffered: BigNumberish,
      maxHTokenRequired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowHToken(
      balanceSheet: string,
      hToken: string,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowHTokenAndAddLiquidity(
      balanceSheet: string,
      hifiPool: string,
      maxBorrowAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowHTokenAndBuyUnderlying(
      balanceSheet: string,
      hifiPool: string,
      maxBorrowAmount: BigNumberish,
      underlyingOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowHTokenAndSellHToken(
      balanceSheet: string,
      hifiPool: string,
      borrowAmount: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyHToken(
      hifiPool: string,
      hTokenOut: BigNumberish,
      maxUnderlyingIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyHTokenAndAddLiquidity(
      hifiPool: string,
      hTokenOut: BigNumberish,
      maxUnderlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyHTokenAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyUnderlying(
      hifiPool: string,
      underlyingOut: BigNumberish,
      maxHTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyUnderlyingAndAddLiquidity(
      hifiPool: string,
      maxHTokenAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateral(
      balanceSheet: string,
      collateral: string,
      depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateralAndBorrowHToken(
      balanceSheet: string,
      collateral: string,
      hToken: string,
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateralAndBorrowHTokenAndAddLiquidity(
      balanceSheet: string,
      collateral: string,
      hifiPool: string,
      depositAmount: BigNumberish,
      maxBorrowAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateralAndBorrowHTokenAndSellHToken(
      balanceSheet: string,
      collateral: string,
      hifiPool: string,
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositUnderlyingAsCollateralAndBorrowHTokenAndAddLiquidity(
      balanceSheet: string,
      hifiPool: string,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemHToken(
      hToken: string,
      hTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityAndRedeemHToken(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityAndRepayBorrowAndWithdrawCollateral(
      hifiPool: string,
      balanceSheet: string,
      collateral: string,
      poolTokensBurned: BigNumberish,
      repayAmount: BigNumberish,
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityAndSellHToken(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayBorrow(
      balanceSheet: string,
      hToken: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sellHToken(
      hifiPool: string,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sellUnderlying(
      hifiPool: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sellUnderlyingAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyUnderlying(
      hToken: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyUnderlyingAndRepayBorrow(
      hToken: string,
      balanceSheet: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateral(
      balanceSheet: string,
      collateral: string,
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapEthAndDepositAndBorrowHTokenAndSellHToken(
      weth: string,
      balanceSheet: string,
      hifiPool: string,
      borrowAmount: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapEthAndDepositCollateral(
      weth: string,
      balanceSheet: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BorrowHTokenAndBuyUnderlying(address,uint256,uint256)"(
      borrower?: string | null,
      borrowAmount?: null,
      underlyingAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { borrower: string; borrowAmount: BigNumber; underlyingAmount: BigNumber }
    >;

    BorrowHTokenAndBuyUnderlying(
      borrower?: string | null,
      borrowAmount?: null,
      underlyingAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { borrower: string; borrowAmount: BigNumber; underlyingAmount: BigNumber }
    >;

    "BorrowHTokenAndSellHToken(address,uint256,uint256)"(
      borrower?: string | null,
      borrowAmount?: null,
      underlyingAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { borrower: string; borrowAmount: BigNumber; underlyingAmount: BigNumber }
    >;

    BorrowHTokenAndSellHToken(
      borrower?: string | null,
      borrowAmount?: null,
      underlyingAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { borrower: string; borrowAmount: BigNumber; underlyingAmount: BigNumber }
    >;
  };

  estimateGas: {
    addLiquidity(
      hifiPool: string,
      underlyingOffered: BigNumberish,
      maxHTokenRequired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowHToken(
      balanceSheet: string,
      hToken: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowHTokenAndAddLiquidity(
      balanceSheet: string,
      hifiPool: string,
      maxBorrowAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowHTokenAndBuyUnderlying(
      balanceSheet: string,
      hifiPool: string,
      maxBorrowAmount: BigNumberish,
      underlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowHTokenAndSellHToken(
      balanceSheet: string,
      hifiPool: string,
      borrowAmount: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyHToken(
      hifiPool: string,
      hTokenOut: BigNumberish,
      maxUnderlyingIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyHTokenAndAddLiquidity(
      hifiPool: string,
      hTokenOut: BigNumberish,
      maxUnderlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyHTokenAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyUnderlying(
      hifiPool: string,
      underlyingOut: BigNumberish,
      maxHTokenIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyUnderlyingAndAddLiquidity(
      hifiPool: string,
      maxHTokenAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCollateral(
      balanceSheet: string,
      collateral: string,
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCollateralAndBorrowHToken(
      balanceSheet: string,
      collateral: string,
      hToken: string,
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCollateralAndBorrowHTokenAndAddLiquidity(
      balanceSheet: string,
      collateral: string,
      hifiPool: string,
      depositAmount: BigNumberish,
      maxBorrowAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCollateralAndBorrowHTokenAndSellHToken(
      balanceSheet: string,
      collateral: string,
      hifiPool: string,
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositUnderlyingAsCollateralAndBorrowHTokenAndAddLiquidity(
      balanceSheet: string,
      hifiPool: string,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemHToken(
      hToken: string,
      hTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityAndRedeemHToken(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityAndRepayBorrowAndWithdrawCollateral(
      hifiPool: string,
      balanceSheet: string,
      collateral: string,
      poolTokensBurned: BigNumberish,
      repayAmount: BigNumberish,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityAndSellHToken(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayBorrow(
      balanceSheet: string,
      hToken: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellHToken(
      hifiPool: string,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellUnderlying(
      hifiPool: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellUnderlyingAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplyUnderlying(
      hToken: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplyUnderlyingAndRepayBorrow(
      hToken: string,
      balanceSheet: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateral(
      balanceSheet: string,
      collateral: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapEthAndDepositAndBorrowHTokenAndSellHToken(
      weth: string,
      balanceSheet: string,
      hifiPool: string,
      borrowAmount: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapEthAndDepositCollateral(
      weth: string,
      balanceSheet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      hifiPool: string,
      underlyingOffered: BigNumberish,
      maxHTokenRequired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowHToken(
      balanceSheet: string,
      hToken: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowHTokenAndAddLiquidity(
      balanceSheet: string,
      hifiPool: string,
      maxBorrowAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowHTokenAndBuyUnderlying(
      balanceSheet: string,
      hifiPool: string,
      maxBorrowAmount: BigNumberish,
      underlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowHTokenAndSellHToken(
      balanceSheet: string,
      hifiPool: string,
      borrowAmount: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyHToken(
      hifiPool: string,
      hTokenOut: BigNumberish,
      maxUnderlyingIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyHTokenAndAddLiquidity(
      hifiPool: string,
      hTokenOut: BigNumberish,
      maxUnderlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyHTokenAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      maxUnderlyingIn: BigNumberish,
      hTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyUnderlying(
      hifiPool: string,
      underlyingOut: BigNumberish,
      maxHTokenIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyUnderlyingAndAddLiquidity(
      hifiPool: string,
      maxHTokenAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      balanceSheet: string,
      collateral: string,
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateralAndBorrowHToken(
      balanceSheet: string,
      collateral: string,
      hToken: string,
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateralAndBorrowHTokenAndAddLiquidity(
      balanceSheet: string,
      collateral: string,
      hifiPool: string,
      depositAmount: BigNumberish,
      maxBorrowAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateralAndBorrowHTokenAndSellHToken(
      balanceSheet: string,
      collateral: string,
      hifiPool: string,
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositUnderlyingAsCollateralAndBorrowHTokenAndAddLiquidity(
      balanceSheet: string,
      hifiPool: string,
      depositAmount: BigNumberish,
      underlyingOffered: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemHToken(
      hToken: string,
      hTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityAndRedeemHToken(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityAndRepayBorrowAndWithdrawCollateral(
      hifiPool: string,
      balanceSheet: string,
      collateral: string,
      poolTokensBurned: BigNumberish,
      repayAmount: BigNumberish,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityAndSellHToken(
      hifiPool: string,
      poolTokensBurned: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayBorrow(
      balanceSheet: string,
      hToken: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellHToken(
      hifiPool: string,
      hTokenIn: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellUnderlying(
      hifiPool: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellUnderlyingAndRepayBorrow(
      hifiPool: string,
      balanceSheet: string,
      underlyingIn: BigNumberish,
      minHTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplyUnderlying(
      hToken: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplyUnderlyingAndRepayBorrow(
      hToken: string,
      balanceSheet: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      balanceSheet: string,
      collateral: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapEthAndDepositAndBorrowHTokenAndSellHToken(
      weth: string,
      balanceSheet: string,
      hifiPool: string,
      borrowAmount: BigNumberish,
      minUnderlyingOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapEthAndDepositCollateral(
      weth: string,
      balanceSheet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
