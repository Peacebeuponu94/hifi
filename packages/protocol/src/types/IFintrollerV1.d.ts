/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IFintrollerV1Interface extends ethers.utils.Interface {
  functions: {
    "_renounceOwnership()": FunctionFragment;
    "_transferOwnership(address)": FunctionFragment;
    "getBond(address)": FunctionFragment;
    "getBorrowAllowed(address)": FunctionFragment;
    "getCollateral(address)": FunctionFragment;
    "getCollateralCeiling(address)": FunctionFragment;
    "getCollateralRatio(address)": FunctionFragment;
    "getDebtCeiling(address)": FunctionFragment;
    "getDepositCollateralAllowed(address)": FunctionFragment;
    "getLiquidateBorrowAllowed(address)": FunctionFragment;
    "getLiquidationIncentive(address)": FunctionFragment;
    "getRepayBorrowAllowed(address)": FunctionFragment;
    "isBondListed(address)": FunctionFragment;
    "isCollateralListed(address)": FunctionFragment;
    "listBond(address)": FunctionFragment;
    "listCollateral(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "setBorrowAllowed(address,bool)": FunctionFragment;
    "setCollateralCeiling(address,uint256)": FunctionFragment;
    "setCollateralRatio(address,uint256)": FunctionFragment;
    "setDebtCeiling(address,uint256)": FunctionFragment;
    "setDepositCollateralAllowed(address,bool)": FunctionFragment;
    "setLiquidateBorrowAllowed(address,bool)": FunctionFragment;
    "setLiquidationIncentive(address,uint256)": FunctionFragment;
    "setMaxBonds(uint256)": FunctionFragment;
    "setRepayBorrowAllowed(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getBond", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBorrowAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralCeiling",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtCeiling",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositCollateralAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidateBorrowAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationIncentive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepayBorrowAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBondListed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateralListed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "listBond", values: [string]): string;
  encodeFunctionData(
    functionFragment: "listCollateral",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBorrowAllowed",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralCeiling",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralRatio",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtCeiling",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositCollateralAllowed",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidateBorrowAllowed",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationIncentive",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBonds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRepayBorrowAllowed",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "_renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositCollateralAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidateBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepayBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBondListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollateralListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositCollateralAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidateBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRepayBorrowAllowed",
    data: BytesLike
  ): Result;

  events: {
    "ListBond(address,address)": EventFragment;
    "ListCollateral(address,address)": EventFragment;
    "SetBorrowAllowed(address,address,bool)": EventFragment;
    "SetCollateralCeiling(address,address,uint256,uint256)": EventFragment;
    "SetCollateralRatio(address,address,uint256,uint256)": EventFragment;
    "SetDebtCeiling(address,address,uint256,uint256)": EventFragment;
    "SetDepositCollateralAllowed(address,address,bool)": EventFragment;
    "SetLiquidateBorrowAllowed(address,address,bool)": EventFragment;
    "SetLiquidationIncentive(address,address,uint256,uint256)": EventFragment;
    "SetMaxBonds(address,uint256,uint256)": EventFragment;
    "SetRedeemHTokensAllowed(address,address,bool)": EventFragment;
    "SetRepayBorrowAllowed(address,address,bool)": EventFragment;
    "SetSupplyUnderlyingAllowed(address,address,bool)": EventFragment;
    "TransferOwnership(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ListBond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBorrowAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCollateralCeiling"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCollateralRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDebtCeiling"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetDepositCollateralAllowed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiquidateBorrowAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiquidationIncentive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxBonds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRedeemHTokensAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRepayBorrowAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSupplyUnderlyingAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOwnership"): EventFragment;
}

export type ListBondEvent = TypedEvent<
  [string, string] & { owner: string; bond: string }
>;

export type ListCollateralEvent = TypedEvent<
  [string, string] & { owner: string; collateral: string }
>;

export type SetBorrowAllowedEvent = TypedEvent<
  [string, string, boolean] & { owner: string; bond: string; state: boolean }
>;

export type SetCollateralCeilingEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    owner: string;
    collateral: string;
    oldCollateralCeiling: BigNumber;
    newCollateralCeiling: BigNumber;
  }
>;

export type SetCollateralRatioEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    owner: string;
    collateral: string;
    oldCollateralRatio: BigNumber;
    newCollateralRatio: BigNumber;
  }
>;

export type SetDebtCeilingEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    owner: string;
    bond: string;
    oldDebtCeiling: BigNumber;
    newDebtCeiling: BigNumber;
  }
>;

export type SetDepositCollateralAllowedEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    collateral: string;
    state: boolean;
  }
>;

export type SetLiquidateBorrowAllowedEvent = TypedEvent<
  [string, string, boolean] & { owner: string; bond: string; state: boolean }
>;

export type SetLiquidationIncentiveEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    owner: string;
    collateral: string;
    oldLiquidationIncentive: BigNumber;
    newLiquidationIncentive: BigNumber;
  }
>;

export type SetMaxBondsEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    owner: string;
    oldMaxBonds: BigNumber;
    newMaxBonds: BigNumber;
  }
>;

export type SetRedeemHTokensAllowedEvent = TypedEvent<
  [string, string, boolean] & { owner: string; bond: string; state: boolean }
>;

export type SetRepayBorrowAllowedEvent = TypedEvent<
  [string, string, boolean] & { owner: string; bond: string; state: boolean }
>;

export type SetSupplyUnderlyingAllowedEvent = TypedEvent<
  [string, string, boolean] & { owner: string; bond: string; state: boolean }
>;

export type TransferOwnershipEvent = TypedEvent<
  [string, string] & { oldOwner: string; newOwner: string }
>;

export class IFintrollerV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFintrollerV1Interface;

  functions: {
    _renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBond(
      bond: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, boolean, boolean, boolean, boolean, boolean] & {
          debtCeiling: BigNumber;
          isBorrowAllowed: boolean;
          isLiquidateBorrowAllowed: boolean;
          isListed: boolean;
          isRedeemHTokenAllowed: boolean;
          isRepayBorrowAllowed: boolean;
          isSupplyUnderlyingAllowed: boolean;
        }
      ]
    >;

    getBorrowAllowed(
      bond: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCollateral(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
          ceiling: BigNumber;
          ratio: BigNumber;
          liquidationIncentive: BigNumber;
          isDepositCollateralAllowed: boolean;
          isListed: boolean;
        }
      ]
    >;

    getCollateralCeiling(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCollateralRatio(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDebtCeiling(
      bond: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositCollateralAllowed(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLiquidateBorrowAllowed(
      bond: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLiquidationIncentive(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRepayBorrowAllowed(
      bond: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBondListed(bond: string, overrides?: CallOverrides): Promise<[boolean]>;

    isCollateralListed(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listBond(
      bond: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listCollateral(
      collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setBorrowAllowed(
      bond: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralCeiling(
      collateral: string,
      newCollateralCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralRatio(
      collateral: string,
      newCollateralRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDebtCeiling(
      bond: string,
      newDebtCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositCollateralAllowed(
      collateral: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidateBorrowAllowed(
      bond: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidationIncentive(
      collateral: string,
      newLiquidationIncentive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxBonds(
      newMaxBonds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRepayBorrowAllowed(
      bond: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBond(
    bond: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, boolean, boolean, boolean, boolean, boolean] & {
      debtCeiling: BigNumber;
      isBorrowAllowed: boolean;
      isLiquidateBorrowAllowed: boolean;
      isListed: boolean;
      isRedeemHTokenAllowed: boolean;
      isRepayBorrowAllowed: boolean;
      isSupplyUnderlyingAllowed: boolean;
    }
  >;

  getBorrowAllowed(bond: string, overrides?: CallOverrides): Promise<boolean>;

  getCollateral(
    collateral: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
      ceiling: BigNumber;
      ratio: BigNumber;
      liquidationIncentive: BigNumber;
      isDepositCollateralAllowed: boolean;
      isListed: boolean;
    }
  >;

  getCollateralCeiling(
    collateral: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralRatio(
    collateral: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDebtCeiling(bond: string, overrides?: CallOverrides): Promise<BigNumber>;

  getDepositCollateralAllowed(
    collateral: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLiquidateBorrowAllowed(
    bond: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLiquidationIncentive(
    collateral: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRepayBorrowAllowed(
    bond: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBondListed(bond: string, overrides?: CallOverrides): Promise<boolean>;

  isCollateralListed(
    collateral: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listBond(
    bond: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listCollateral(
    collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  setBorrowAllowed(
    bond: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralCeiling(
    collateral: string,
    newCollateralCeiling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralRatio(
    collateral: string,
    newCollateralRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDebtCeiling(
    bond: string,
    newDebtCeiling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositCollateralAllowed(
    collateral: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidateBorrowAllowed(
    bond: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidationIncentive(
    collateral: string,
    newLiquidationIncentive: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxBonds(
    newMaxBonds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRepayBorrowAllowed(
    bond: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _renounceOwnership(overrides?: CallOverrides): Promise<void>;

    _transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getBond(
      bond: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean, boolean, boolean, boolean, boolean] & {
        debtCeiling: BigNumber;
        isBorrowAllowed: boolean;
        isLiquidateBorrowAllowed: boolean;
        isListed: boolean;
        isRedeemHTokenAllowed: boolean;
        isRepayBorrowAllowed: boolean;
        isSupplyUnderlyingAllowed: boolean;
      }
    >;

    getBorrowAllowed(bond: string, overrides?: CallOverrides): Promise<boolean>;

    getCollateral(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        ceiling: BigNumber;
        ratio: BigNumber;
        liquidationIncentive: BigNumber;
        isDepositCollateralAllowed: boolean;
        isListed: boolean;
      }
    >;

    getCollateralCeiling(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralRatio(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtCeiling(bond: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositCollateralAllowed(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLiquidateBorrowAllowed(
      bond: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLiquidationIncentive(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepayBorrowAllowed(
      bond: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBondListed(bond: string, overrides?: CallOverrides): Promise<boolean>;

    isCollateralListed(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listBond(bond: string, overrides?: CallOverrides): Promise<void>;

    listCollateral(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    setBorrowAllowed(
      bond: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralCeiling(
      collateral: string,
      newCollateralCeiling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralRatio(
      collateral: string,
      newCollateralRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDebtCeiling(
      bond: string,
      newDebtCeiling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositCollateralAllowed(
      collateral: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidateBorrowAllowed(
      bond: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationIncentive(
      collateral: string,
      newLiquidationIncentive: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBonds(
      newMaxBonds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRepayBorrowAllowed(
      bond: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ListBond(address,address)"(
      owner?: string | null,
      bond?: string | null
    ): TypedEventFilter<[string, string], { owner: string; bond: string }>;

    ListBond(
      owner?: string | null,
      bond?: string | null
    ): TypedEventFilter<[string, string], { owner: string; bond: string }>;

    "ListCollateral(address,address)"(
      owner?: string | null,
      collateral?: string | null
    ): TypedEventFilter<
      [string, string],
      { owner: string; collateral: string }
    >;

    ListCollateral(
      owner?: string | null,
      collateral?: string | null
    ): TypedEventFilter<
      [string, string],
      { owner: string; collateral: string }
    >;

    "SetBorrowAllowed(address,address,bool)"(
      owner?: string | null,
      bond?: string | null,
      state?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; bond: string; state: boolean }
    >;

    SetBorrowAllowed(
      owner?: string | null,
      bond?: string | null,
      state?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; bond: string; state: boolean }
    >;

    "SetCollateralCeiling(address,address,uint256,uint256)"(
      owner?: string | null,
      collateral?: string | null,
      oldCollateralCeiling?: null,
      newCollateralCeiling?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        owner: string;
        collateral: string;
        oldCollateralCeiling: BigNumber;
        newCollateralCeiling: BigNumber;
      }
    >;

    SetCollateralCeiling(
      owner?: string | null,
      collateral?: string | null,
      oldCollateralCeiling?: null,
      newCollateralCeiling?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        owner: string;
        collateral: string;
        oldCollateralCeiling: BigNumber;
        newCollateralCeiling: BigNumber;
      }
    >;

    "SetCollateralRatio(address,address,uint256,uint256)"(
      owner?: string | null,
      collateral?: string | null,
      oldCollateralRatio?: null,
      newCollateralRatio?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        owner: string;
        collateral: string;
        oldCollateralRatio: BigNumber;
        newCollateralRatio: BigNumber;
      }
    >;

    SetCollateralRatio(
      owner?: string | null,
      collateral?: string | null,
      oldCollateralRatio?: null,
      newCollateralRatio?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        owner: string;
        collateral: string;
        oldCollateralRatio: BigNumber;
        newCollateralRatio: BigNumber;
      }
    >;

    "SetDebtCeiling(address,address,uint256,uint256)"(
      owner?: string | null,
      bond?: string | null,
      oldDebtCeiling?: null,
      newDebtCeiling?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        owner: string;
        bond: string;
        oldDebtCeiling: BigNumber;
        newDebtCeiling: BigNumber;
      }
    >;

    SetDebtCeiling(
      owner?: string | null,
      bond?: string | null,
      oldDebtCeiling?: null,
      newDebtCeiling?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        owner: string;
        bond: string;
        oldDebtCeiling: BigNumber;
        newDebtCeiling: BigNumber;
      }
    >;

    "SetDepositCollateralAllowed(address,address,bool)"(
      owner?: string | null,
      collateral?: string | null,
      state?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; collateral: string; state: boolean }
    >;

    SetDepositCollateralAllowed(
      owner?: string | null,
      collateral?: string | null,
      state?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; collateral: string; state: boolean }
    >;

    "SetLiquidateBorrowAllowed(address,address,bool)"(
      owner?: string | null,
      bond?: string | null,
      state?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; bond: string; state: boolean }
    >;

    SetLiquidateBorrowAllowed(
      owner?: string | null,
      bond?: string | null,
      state?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; bond: string; state: boolean }
    >;

    "SetLiquidationIncentive(address,address,uint256,uint256)"(
      owner?: string | null,
      collateral?: null,
      oldLiquidationIncentive?: null,
      newLiquidationIncentive?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        owner: string;
        collateral: string;
        oldLiquidationIncentive: BigNumber;
        newLiquidationIncentive: BigNumber;
      }
    >;

    SetLiquidationIncentive(
      owner?: string | null,
      collateral?: null,
      oldLiquidationIncentive?: null,
      newLiquidationIncentive?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        owner: string;
        collateral: string;
        oldLiquidationIncentive: BigNumber;
        newLiquidationIncentive: BigNumber;
      }
    >;

    "SetMaxBonds(address,uint256,uint256)"(
      owner?: string | null,
      oldMaxBonds?: null,
      newMaxBonds?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; oldMaxBonds: BigNumber; newMaxBonds: BigNumber }
    >;

    SetMaxBonds(
      owner?: string | null,
      oldMaxBonds?: null,
      newMaxBonds?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; oldMaxBonds: BigNumber; newMaxBonds: BigNumber }
    >;

    "SetRedeemHTokensAllowed(address,address,bool)"(
      owner?: string | null,
      bond?: string | null,
      state?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; bond: string; state: boolean }
    >;

    SetRedeemHTokensAllowed(
      owner?: string | null,
      bond?: string | null,
      state?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; bond: string; state: boolean }
    >;

    "SetRepayBorrowAllowed(address,address,bool)"(
      owner?: string | null,
      bond?: string | null,
      state?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; bond: string; state: boolean }
    >;

    SetRepayBorrowAllowed(
      owner?: string | null,
      bond?: string | null,
      state?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; bond: string; state: boolean }
    >;

    "SetSupplyUnderlyingAllowed(address,address,bool)"(
      owner?: string | null,
      bond?: string | null,
      state?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; bond: string; state: boolean }
    >;

    SetSupplyUnderlyingAllowed(
      owner?: string | null,
      bond?: string | null,
      state?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; bond: string; state: boolean }
    >;

    "TransferOwnership(address,address)"(
      oldOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    TransferOwnership(
      oldOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    _renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBond(bond: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowAllowed(
      bond: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateral(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralCeiling(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralRatio(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtCeiling(bond: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositCollateralAllowed(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidateBorrowAllowed(
      bond: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationIncentive(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepayBorrowAllowed(
      bond: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBondListed(bond: string, overrides?: CallOverrides): Promise<BigNumber>;

    isCollateralListed(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listBond(
      bond: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listCollateral(
      collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setBorrowAllowed(
      bond: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralCeiling(
      collateral: string,
      newCollateralCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralRatio(
      collateral: string,
      newCollateralRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDebtCeiling(
      bond: string,
      newDebtCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositCollateralAllowed(
      collateral: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidateBorrowAllowed(
      bond: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidationIncentive(
      collateral: string,
      newLiquidationIncentive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxBonds(
      newMaxBonds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRepayBorrowAllowed(
      bond: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBond(
      bond: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowAllowed(
      bond: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateral(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralCeiling(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralRatio(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtCeiling(
      bond: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositCollateralAllowed(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidateBorrowAllowed(
      bond: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationIncentive(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRepayBorrowAllowed(
      bond: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBondListed(
      bond: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollateralListed(
      collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listBond(
      bond: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listCollateral(
      collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBorrowAllowed(
      bond: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralCeiling(
      collateral: string,
      newCollateralCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralRatio(
      collateral: string,
      newCollateralRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDebtCeiling(
      bond: string,
      newDebtCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositCollateralAllowed(
      collateral: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidateBorrowAllowed(
      bond: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationIncentive(
      collateral: string,
      newLiquidationIncentive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBonds(
      newMaxBonds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRepayBorrowAllowed(
      bond: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
