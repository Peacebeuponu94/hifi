/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ChainlinkOperatorInterface extends ethers.utils.Interface {
  functions: {
    "_renounceOwnership()": FunctionFragment;
    "_transferOwnership(address)": FunctionFragment;
    "deleteFeed(string)": FunctionFragment;
    "getFeed(string)": FunctionFragment;
    "getNormalizedPrice(string)": FunctionFragment;
    "getPrice(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "pricePrecision()": FunctionFragment;
    "pricePrecisionScalar()": FunctionFragment;
    "setFeed(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deleteFeed", values: [string]): string;
  encodeFunctionData(functionFragment: "getFeed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNormalizedPrice",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePrecision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePrecisionScalar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeed",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePrecisionScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeed", data: BytesLike): Result;

  events: {
    "DeleteFeed(address,address)": EventFragment;
    "SetFeed(address,address)": EventFragment;
    "TransferOwnership(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeleteFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOwnership"): EventFragment;
}

export type DeleteFeedEvent = TypedEvent<
  [string, string] & { asset: string; feed: string }
>;

export type SetFeedEvent = TypedEvent<
  [string, string] & { asset: string; feed: string }
>;

export type TransferOwnershipEvent = TypedEvent<
  [string, string] & { oldOwner: string; newOwner: string }
>;

export class ChainlinkOperator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ChainlinkOperatorInterface;

  functions: {
    _renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteFeed(
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFeed(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getNormalizedPrice(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(symbol: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pricePrecision(overrides?: CallOverrides): Promise<[BigNumber]>;

    pricePrecisionScalar(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeed(
      asset: string,
      feed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteFeed(
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFeed(
    symbol: string,
    overrides?: CallOverrides
  ): Promise<[string, string, boolean]>;

  getNormalizedPrice(
    symbol: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(symbol: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pricePrecision(overrides?: CallOverrides): Promise<BigNumber>;

  pricePrecisionScalar(overrides?: CallOverrides): Promise<BigNumber>;

  setFeed(
    asset: string,
    feed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _renounceOwnership(overrides?: CallOverrides): Promise<void>;

    _transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteFeed(symbol: string, overrides?: CallOverrides): Promise<void>;

    getFeed(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getNormalizedPrice(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(symbol: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pricePrecision(overrides?: CallOverrides): Promise<BigNumber>;

    pricePrecisionScalar(overrides?: CallOverrides): Promise<BigNumber>;

    setFeed(
      asset: string,
      feed: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DeleteFeed(address,address)"(
      asset?: string | null,
      feed?: string | null
    ): TypedEventFilter<[string, string], { asset: string; feed: string }>;

    DeleteFeed(
      asset?: string | null,
      feed?: string | null
    ): TypedEventFilter<[string, string], { asset: string; feed: string }>;

    "SetFeed(address,address)"(
      asset?: string | null,
      feed?: string | null
    ): TypedEventFilter<[string, string], { asset: string; feed: string }>;

    SetFeed(
      asset?: string | null,
      feed?: string | null
    ): TypedEventFilter<[string, string], { asset: string; feed: string }>;

    "TransferOwnership(address,address)"(
      oldOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    TransferOwnership(
      oldOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    _renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteFeed(
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFeed(symbol: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNormalizedPrice(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(symbol: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pricePrecision(overrides?: CallOverrides): Promise<BigNumber>;

    pricePrecisionScalar(overrides?: CallOverrides): Promise<BigNumber>;

    setFeed(
      asset: string,
      feed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteFeed(
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFeed(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNormalizedPrice(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePrecision(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePrecisionScalar(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeed(
      asset: string,
      feed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
